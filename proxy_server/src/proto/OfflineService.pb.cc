// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OfflineService.proto

#include "OfflineService.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_OfflineService_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_from_message_OfflineService_2eproto;
namespace rj_OfflineService {
class WriteOfflineRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WriteOfflineRequest> _instance;
} _WriteOfflineRequest_default_instance_;
class ReadOfflineRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadOfflineRequest> _instance;
} _ReadOfflineRequest_default_instance_;
class from_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<from_message> _instance;
} _from_message_default_instance_;
class ReadOfflineResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadOfflineResponse> _instance;
} _ReadOfflineResponse_default_instance_;
}  // namespace rj_OfflineService
static void InitDefaultsscc_info_ReadOfflineRequest_OfflineService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rj_OfflineService::_ReadOfflineRequest_default_instance_;
    new (ptr) ::rj_OfflineService::ReadOfflineRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadOfflineRequest_OfflineService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReadOfflineRequest_OfflineService_2eproto}, {}};

static void InitDefaultsscc_info_ReadOfflineResponse_OfflineService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rj_OfflineService::_ReadOfflineResponse_default_instance_;
    new (ptr) ::rj_OfflineService::ReadOfflineResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReadOfflineResponse_OfflineService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReadOfflineResponse_OfflineService_2eproto}, {
      &scc_info_from_message_OfflineService_2eproto.base,}};

static void InitDefaultsscc_info_WriteOfflineRequest_OfflineService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rj_OfflineService::_WriteOfflineRequest_default_instance_;
    new (ptr) ::rj_OfflineService::WriteOfflineRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WriteOfflineRequest_OfflineService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WriteOfflineRequest_OfflineService_2eproto}, {}};

static void InitDefaultsscc_info_from_message_OfflineService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rj_OfflineService::_from_message_default_instance_;
    new (ptr) ::rj_OfflineService::from_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_from_message_OfflineService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_from_message_OfflineService_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_OfflineService_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_OfflineService_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_OfflineService_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_OfflineService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rj_OfflineService::WriteOfflineRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rj_OfflineService::WriteOfflineRequest, user_id_),
  PROTOBUF_FIELD_OFFSET(::rj_OfflineService::WriteOfflineRequest, friend_id_),
  PROTOBUF_FIELD_OFFSET(::rj_OfflineService::WriteOfflineRequest, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rj_OfflineService::ReadOfflineRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rj_OfflineService::ReadOfflineRequest, myid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rj_OfflineService::from_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rj_OfflineService::from_message, from_id_),
  PROTOBUF_FIELD_OFFSET(::rj_OfflineService::from_message, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rj_OfflineService::ReadOfflineResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rj_OfflineService::ReadOfflineResponse, is_success_),
  PROTOBUF_FIELD_OFFSET(::rj_OfflineService::ReadOfflineResponse, msgs_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::rj_OfflineService::WriteOfflineRequest)},
  { 8, -1, sizeof(::rj_OfflineService::ReadOfflineRequest)},
  { 14, -1, sizeof(::rj_OfflineService::from_message)},
  { 21, -1, sizeof(::rj_OfflineService::ReadOfflineResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rj_OfflineService::_WriteOfflineRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rj_OfflineService::_ReadOfflineRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rj_OfflineService::_from_message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rj_OfflineService::_ReadOfflineResponse_default_instance_),
};

const char descriptor_table_protodef_OfflineService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024OfflineService.proto\022\021rj_OfflineServic"
  "e\032\033google/protobuf/empty.proto\"F\n\023WriteO"
  "fflineRequest\022\017\n\007user_id\030\001 \001(\005\022\021\n\tfriend"
  "_id\030\002 \001(\005\022\013\n\003msg\030\003 \001(\014\"\"\n\022ReadOfflineReq"
  "uest\022\014\n\004myid\030\001 \001(\005\",\n\014from_message\022\017\n\007fr"
  "om_id\030\001 \001(\005\022\013\n\003msg\030\002 \001(\014\"X\n\023ReadOfflineR"
  "esponse\022\022\n\nis_success\030\001 \001(\010\022-\n\004msgs\030\002 \003("
  "\0132\037.rj_OfflineService.from_message2\301\001\n\021O"
  "fflineServiceRpc\022N\n\014WriteOffline\022&.rj_Of"
  "flineService.WriteOfflineRequest\032\026.googl"
  "e.protobuf.Empty\022\\\n\013ReadOffline\022%.rj_Off"
  "lineService.ReadOfflineRequest\032&.rj_Offl"
  "ineService.ReadOfflineResponseB\003\200\001\001b\006pro"
  "to3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_OfflineService_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_OfflineService_2eproto_sccs[4] = {
  &scc_info_ReadOfflineRequest_OfflineService_2eproto.base,
  &scc_info_ReadOfflineResponse_OfflineService_2eproto.base,
  &scc_info_WriteOfflineRequest_OfflineService_2eproto.base,
  &scc_info_from_message_OfflineService_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_OfflineService_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_OfflineService_2eproto = {
  false, false, descriptor_table_protodef_OfflineService_2eproto, "OfflineService.proto", 523,
  &descriptor_table_OfflineService_2eproto_once, descriptor_table_OfflineService_2eproto_sccs, descriptor_table_OfflineService_2eproto_deps, 4, 1,
  schemas, file_default_instances, TableStruct_OfflineService_2eproto::offsets,
  file_level_metadata_OfflineService_2eproto, 4, file_level_enum_descriptors_OfflineService_2eproto, file_level_service_descriptors_OfflineService_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_OfflineService_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_OfflineService_2eproto)), true);
namespace rj_OfflineService {

// ===================================================================

class WriteOfflineRequest::_Internal {
 public:
};

WriteOfflineRequest::WriteOfflineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rj_OfflineService.WriteOfflineRequest)
}
WriteOfflineRequest::WriteOfflineRequest(const WriteOfflineRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArena());
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&friend_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(friend_id_));
  // @@protoc_insertion_point(copy_constructor:rj_OfflineService.WriteOfflineRequest)
}

void WriteOfflineRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WriteOfflineRequest_OfflineService_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&friend_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(friend_id_));
}

WriteOfflineRequest::~WriteOfflineRequest() {
  // @@protoc_insertion_point(destructor:rj_OfflineService.WriteOfflineRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WriteOfflineRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WriteOfflineRequest::ArenaDtor(void* object) {
  WriteOfflineRequest* _this = reinterpret_cast< WriteOfflineRequest* >(object);
  (void)_this;
}
void WriteOfflineRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriteOfflineRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WriteOfflineRequest& WriteOfflineRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WriteOfflineRequest_OfflineService_2eproto.base);
  return *internal_default_instance();
}


void WriteOfflineRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rj_OfflineService.WriteOfflineRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&friend_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(friend_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriteOfflineRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 friend_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          friend_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriteOfflineRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rj_OfflineService.WriteOfflineRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_id(), target);
  }

  // int32 friend_id = 2;
  if (this->friend_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_friend_id(), target);
  }

  // bytes msg = 3;
  if (this->msg().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rj_OfflineService.WriteOfflineRequest)
  return target;
}

size_t WriteOfflineRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rj_OfflineService.WriteOfflineRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg = 3;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg());
  }

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  // int32 friend_id = 2;
  if (this->friend_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_friend_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteOfflineRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rj_OfflineService.WriteOfflineRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteOfflineRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WriteOfflineRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rj_OfflineService.WriteOfflineRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rj_OfflineService.WriteOfflineRequest)
    MergeFrom(*source);
  }
}

void WriteOfflineRequest::MergeFrom(const WriteOfflineRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rj_OfflineService.WriteOfflineRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {
    _internal_set_msg(from._internal_msg());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.friend_id() != 0) {
    _internal_set_friend_id(from._internal_friend_id());
  }
}

void WriteOfflineRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rj_OfflineService.WriteOfflineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteOfflineRequest::CopyFrom(const WriteOfflineRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rj_OfflineService.WriteOfflineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteOfflineRequest::IsInitialized() const {
  return true;
}

void WriteOfflineRequest::InternalSwap(WriteOfflineRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WriteOfflineRequest, friend_id_)
      + sizeof(WriteOfflineRequest::friend_id_)
      - PROTOBUF_FIELD_OFFSET(WriteOfflineRequest, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteOfflineRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ReadOfflineRequest::_Internal {
 public:
};

ReadOfflineRequest::ReadOfflineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rj_OfflineService.ReadOfflineRequest)
}
ReadOfflineRequest::ReadOfflineRequest(const ReadOfflineRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  myid_ = from.myid_;
  // @@protoc_insertion_point(copy_constructor:rj_OfflineService.ReadOfflineRequest)
}

void ReadOfflineRequest::SharedCtor() {
  myid_ = 0;
}

ReadOfflineRequest::~ReadOfflineRequest() {
  // @@protoc_insertion_point(destructor:rj_OfflineService.ReadOfflineRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadOfflineRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ReadOfflineRequest::ArenaDtor(void* object) {
  ReadOfflineRequest* _this = reinterpret_cast< ReadOfflineRequest* >(object);
  (void)_this;
}
void ReadOfflineRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadOfflineRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadOfflineRequest& ReadOfflineRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadOfflineRequest_OfflineService_2eproto.base);
  return *internal_default_instance();
}


void ReadOfflineRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rj_OfflineService.ReadOfflineRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  myid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadOfflineRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 myid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          myid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadOfflineRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rj_OfflineService.ReadOfflineRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 myid = 1;
  if (this->myid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_myid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rj_OfflineService.ReadOfflineRequest)
  return target;
}

size_t ReadOfflineRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rj_OfflineService.ReadOfflineRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 myid = 1;
  if (this->myid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_myid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadOfflineRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rj_OfflineService.ReadOfflineRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadOfflineRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadOfflineRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rj_OfflineService.ReadOfflineRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rj_OfflineService.ReadOfflineRequest)
    MergeFrom(*source);
  }
}

void ReadOfflineRequest::MergeFrom(const ReadOfflineRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rj_OfflineService.ReadOfflineRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.myid() != 0) {
    _internal_set_myid(from._internal_myid());
  }
}

void ReadOfflineRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rj_OfflineService.ReadOfflineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadOfflineRequest::CopyFrom(const ReadOfflineRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rj_OfflineService.ReadOfflineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadOfflineRequest::IsInitialized() const {
  return true;
}

void ReadOfflineRequest::InternalSwap(ReadOfflineRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(myid_, other->myid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadOfflineRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class from_message::_Internal {
 public:
};

from_message::from_message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rj_OfflineService.from_message)
}
from_message::from_message(const from_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArena());
  }
  from_id_ = from.from_id_;
  // @@protoc_insertion_point(copy_constructor:rj_OfflineService.from_message)
}

void from_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_from_message_OfflineService_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  from_id_ = 0;
}

from_message::~from_message() {
  // @@protoc_insertion_point(destructor:rj_OfflineService.from_message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void from_message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void from_message::ArenaDtor(void* object) {
  from_message* _this = reinterpret_cast< from_message* >(object);
  (void)_this;
}
void from_message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void from_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const from_message& from_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_from_message_OfflineService_2eproto.base);
  return *internal_default_instance();
}


void from_message::Clear() {
// @@protoc_insertion_point(message_clear_start:rj_OfflineService.from_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  from_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* from_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 from_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          from_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* from_message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rj_OfflineService.from_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 from_id = 1;
  if (this->from_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_from_id(), target);
  }

  // bytes msg = 2;
  if (this->msg().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rj_OfflineService.from_message)
  return target;
}

size_t from_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rj_OfflineService.from_message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg());
  }

  // int32 from_id = 1;
  if (this->from_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_from_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void from_message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rj_OfflineService.from_message)
  GOOGLE_DCHECK_NE(&from, this);
  const from_message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<from_message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rj_OfflineService.from_message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rj_OfflineService.from_message)
    MergeFrom(*source);
  }
}

void from_message::MergeFrom(const from_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rj_OfflineService.from_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {
    _internal_set_msg(from._internal_msg());
  }
  if (from.from_id() != 0) {
    _internal_set_from_id(from._internal_from_id());
  }
}

void from_message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rj_OfflineService.from_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void from_message::CopyFrom(const from_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rj_OfflineService.from_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool from_message::IsInitialized() const {
  return true;
}

void from_message::InternalSwap(from_message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(from_id_, other->from_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata from_message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ReadOfflineResponse::_Internal {
 public:
};

ReadOfflineResponse::ReadOfflineResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  msgs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rj_OfflineService.ReadOfflineResponse)
}
ReadOfflineResponse::ReadOfflineResponse(const ReadOfflineResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      msgs_(from.msgs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_success_ = from.is_success_;
  // @@protoc_insertion_point(copy_constructor:rj_OfflineService.ReadOfflineResponse)
}

void ReadOfflineResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadOfflineResponse_OfflineService_2eproto.base);
  is_success_ = false;
}

ReadOfflineResponse::~ReadOfflineResponse() {
  // @@protoc_insertion_point(destructor:rj_OfflineService.ReadOfflineResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadOfflineResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ReadOfflineResponse::ArenaDtor(void* object) {
  ReadOfflineResponse* _this = reinterpret_cast< ReadOfflineResponse* >(object);
  (void)_this;
}
void ReadOfflineResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadOfflineResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadOfflineResponse& ReadOfflineResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadOfflineResponse_OfflineService_2eproto.base);
  return *internal_default_instance();
}


void ReadOfflineResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:rj_OfflineService.ReadOfflineResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msgs_.Clear();
  is_success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadOfflineResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .rj_OfflineService.from_message msgs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_msgs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadOfflineResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rj_OfflineService.ReadOfflineResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_success = 1;
  if (this->is_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_success(), target);
  }

  // repeated .rj_OfflineService.from_message msgs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_msgs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_msgs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rj_OfflineService.ReadOfflineResponse)
  return target;
}

size_t ReadOfflineResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rj_OfflineService.ReadOfflineResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rj_OfflineService.from_message msgs = 2;
  total_size += 1UL * this->_internal_msgs_size();
  for (const auto& msg : this->msgs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool is_success = 1;
  if (this->is_success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadOfflineResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rj_OfflineService.ReadOfflineResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadOfflineResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadOfflineResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rj_OfflineService.ReadOfflineResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rj_OfflineService.ReadOfflineResponse)
    MergeFrom(*source);
  }
}

void ReadOfflineResponse::MergeFrom(const ReadOfflineResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rj_OfflineService.ReadOfflineResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msgs_.MergeFrom(from.msgs_);
  if (from.is_success() != 0) {
    _internal_set_is_success(from._internal_is_success());
  }
}

void ReadOfflineResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rj_OfflineService.ReadOfflineResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadOfflineResponse::CopyFrom(const ReadOfflineResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rj_OfflineService.ReadOfflineResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadOfflineResponse::IsInitialized() const {
  return true;
}

void ReadOfflineResponse::InternalSwap(ReadOfflineResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  msgs_.InternalSwap(&other->msgs_);
  swap(is_success_, other->is_success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadOfflineResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

OfflineServiceRpc::~OfflineServiceRpc() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* OfflineServiceRpc::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_OfflineService_2eproto);
  return file_level_service_descriptors_OfflineService_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* OfflineServiceRpc::GetDescriptor() {
  return descriptor();
}

void OfflineServiceRpc::WriteOffline(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::rj_OfflineService::WriteOfflineRequest*,
                         PROTOBUF_NAMESPACE_ID::Empty*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method WriteOffline() not implemented.");
  done->Run();
}

void OfflineServiceRpc::ReadOffline(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::rj_OfflineService::ReadOfflineRequest*,
                         ::rj_OfflineService::ReadOfflineResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ReadOffline() not implemented.");
  done->Run();
}

void OfflineServiceRpc::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_OfflineService_2eproto[0]);
  switch(method->index()) {
    case 0:
      WriteOffline(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::rj_OfflineService::WriteOfflineRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<PROTOBUF_NAMESPACE_ID::Empty*>(
                 response),
             done);
      break;
    case 1:
      ReadOffline(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::rj_OfflineService::ReadOfflineRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::rj_OfflineService::ReadOfflineResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& OfflineServiceRpc::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::rj_OfflineService::WriteOfflineRequest::default_instance();
    case 1:
      return ::rj_OfflineService::ReadOfflineRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& OfflineServiceRpc::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return PROTOBUF_NAMESPACE_ID::Empty::default_instance();
    case 1:
      return ::rj_OfflineService::ReadOfflineResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

OfflineServiceRpc_Stub::OfflineServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
OfflineServiceRpc_Stub::OfflineServiceRpc_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
OfflineServiceRpc_Stub::~OfflineServiceRpc_Stub() {
  if (owns_channel_) delete channel_;
}

void OfflineServiceRpc_Stub::WriteOffline(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::rj_OfflineService::WriteOfflineRequest* request,
                              PROTOBUF_NAMESPACE_ID::Empty* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void OfflineServiceRpc_Stub::ReadOffline(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::rj_OfflineService::ReadOfflineRequest* request,
                              ::rj_OfflineService::ReadOfflineResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace rj_OfflineService
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rj_OfflineService::WriteOfflineRequest* Arena::CreateMaybeMessage< ::rj_OfflineService::WriteOfflineRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rj_OfflineService::WriteOfflineRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::rj_OfflineService::ReadOfflineRequest* Arena::CreateMaybeMessage< ::rj_OfflineService::ReadOfflineRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rj_OfflineService::ReadOfflineRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::rj_OfflineService::from_message* Arena::CreateMaybeMessage< ::rj_OfflineService::from_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rj_OfflineService::from_message >(arena);
}
template<> PROTOBUF_NOINLINE ::rj_OfflineService::ReadOfflineResponse* Arena::CreateMaybeMessage< ::rj_OfflineService::ReadOfflineResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rj_OfflineService::ReadOfflineResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
