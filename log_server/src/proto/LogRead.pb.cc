// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LogRead.proto

#include "LogRead.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace rj_logread {
class LogReadRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogReadRequest> _instance;
} _LogReadRequest_default_instance_;
class LogReadResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogReadResponse> _instance;
} _LogReadResponse_default_instance_;
}  // namespace rj_logread
static void InitDefaultsscc_info_LogReadRequest_LogRead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rj_logread::_LogReadRequest_default_instance_;
    new (ptr) ::rj_logread::LogReadRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rj_logread::LogReadRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogReadRequest_LogRead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogReadRequest_LogRead_2eproto}, {}};

static void InitDefaultsscc_info_LogReadResponse_LogRead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rj_logread::_LogReadResponse_default_instance_;
    new (ptr) ::rj_logread::LogReadResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rj_logread::LogReadResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogReadResponse_LogRead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogReadResponse_LogRead_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_LogRead_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_LogRead_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_LogRead_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_LogRead_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rj_logread::LogReadRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rj_logread::LogReadRequest, node_name_),
  PROTOBUF_FIELD_OFFSET(::rj_logread::LogReadRequest, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rj_logread::LogReadResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rj_logread::LogReadResponse, serial_),
  PROTOBUF_FIELD_OFFSET(::rj_logread::LogReadResponse, is_end_),
  PROTOBUF_FIELD_OFFSET(::rj_logread::LogReadResponse, msg_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::rj_logread::LogReadRequest)},
  { 7, -1, sizeof(::rj_logread::LogReadResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rj_logread::_LogReadRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rj_logread::_LogReadResponse_default_instance_),
};

const char descriptor_table_protodef_LogRead_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rLogRead.proto\022\nrj_logread\"1\n\016LogReadRe"
  "quest\022\021\n\tnode_name\030\001 \001(\014\022\014\n\004time\030\002 \001(\014\">"
  "\n\017LogReadResponse\022\016\n\006serial\030\001 \001(\005\022\016\n\006is_"
  "end\030\002 \001(\010\022\013\n\003msg\030\003 \001(\014b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_LogRead_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_LogRead_2eproto_sccs[2] = {
  &scc_info_LogReadRequest_LogRead_2eproto.base,
  &scc_info_LogReadResponse_LogRead_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_LogRead_2eproto_once;
static bool descriptor_table_LogRead_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_LogRead_2eproto = {
  &descriptor_table_LogRead_2eproto_initialized, descriptor_table_protodef_LogRead_2eproto, "LogRead.proto", 150,
  &descriptor_table_LogRead_2eproto_once, descriptor_table_LogRead_2eproto_sccs, descriptor_table_LogRead_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_LogRead_2eproto::offsets,
  file_level_metadata_LogRead_2eproto, 2, file_level_enum_descriptors_LogRead_2eproto, file_level_service_descriptors_LogRead_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_LogRead_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_LogRead_2eproto), true);
namespace rj_logread {

// ===================================================================

void LogReadRequest::InitAsDefaultInstance() {
}
class LogReadRequest::_Internal {
 public:
};

LogReadRequest::LogReadRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rj_logread.LogReadRequest)
}
LogReadRequest::LogReadRequest(const LogReadRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_name().empty()) {
    node_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_name_);
  }
  time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_time().empty()) {
    time_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.time_);
  }
  // @@protoc_insertion_point(copy_constructor:rj_logread.LogReadRequest)
}

void LogReadRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogReadRequest_LogRead_2eproto.base);
  node_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LogReadRequest::~LogReadRequest() {
  // @@protoc_insertion_point(destructor:rj_logread.LogReadRequest)
  SharedDtor();
}

void LogReadRequest::SharedDtor() {
  node_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogReadRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogReadRequest& LogReadRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogReadRequest_LogRead_2eproto.base);
  return *internal_default_instance();
}


void LogReadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rj_logread.LogReadRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* LogReadRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes node_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_node_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogReadRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rj_logread.LogReadRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes node_name = 1;
  if (this->node_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_node_name(), target);
  }

  // bytes time = 2;
  if (this->time().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rj_logread.LogReadRequest)
  return target;
}

size_t LogReadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rj_logread.LogReadRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes node_name = 1;
  if (this->node_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_node_name());
  }

  // bytes time = 2;
  if (this->time().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogReadRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rj_logread.LogReadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LogReadRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogReadRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rj_logread.LogReadRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rj_logread.LogReadRequest)
    MergeFrom(*source);
  }
}

void LogReadRequest::MergeFrom(const LogReadRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rj_logread.LogReadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_name().size() > 0) {

    node_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_name_);
  }
  if (from.time().size() > 0) {

    time_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.time_);
  }
}

void LogReadRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rj_logread.LogReadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogReadRequest::CopyFrom(const LogReadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rj_logread.LogReadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogReadRequest::IsInitialized() const {
  return true;
}

void LogReadRequest::InternalSwap(LogReadRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  node_name_.Swap(&other->node_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  time_.Swap(&other->time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata LogReadRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogReadResponse::InitAsDefaultInstance() {
}
class LogReadResponse::_Internal {
 public:
};

LogReadResponse::LogReadResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rj_logread.LogReadResponse)
}
LogReadResponse::LogReadResponse(const LogReadResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&serial_, &from.serial_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_end_) -
    reinterpret_cast<char*>(&serial_)) + sizeof(is_end_));
  // @@protoc_insertion_point(copy_constructor:rj_logread.LogReadResponse)
}

void LogReadResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogReadResponse_LogRead_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&serial_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_end_) -
      reinterpret_cast<char*>(&serial_)) + sizeof(is_end_));
}

LogReadResponse::~LogReadResponse() {
  // @@protoc_insertion_point(destructor:rj_logread.LogReadResponse)
  SharedDtor();
}

void LogReadResponse::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogReadResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogReadResponse& LogReadResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogReadResponse_LogRead_2eproto.base);
  return *internal_default_instance();
}


void LogReadResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:rj_logread.LogReadResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&serial_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_end_) -
      reinterpret_cast<char*>(&serial_)) + sizeof(is_end_));
  _internal_metadata_.Clear();
}

const char* LogReadResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 serial = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          serial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogReadResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rj_logread.LogReadResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 serial = 1;
  if (this->serial() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_serial(), target);
  }

  // bool is_end = 2;
  if (this->is_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_end(), target);
  }

  // bytes msg = 3;
  if (this->msg().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rj_logread.LogReadResponse)
  return target;
}

size_t LogReadResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rj_logread.LogReadResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg = 3;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg());
  }

  // int32 serial = 1;
  if (this->serial() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_serial());
  }

  // bool is_end = 2;
  if (this->is_end() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogReadResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rj_logread.LogReadResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LogReadResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogReadResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rj_logread.LogReadResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rj_logread.LogReadResponse)
    MergeFrom(*source);
  }
}

void LogReadResponse::MergeFrom(const LogReadResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rj_logread.LogReadResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.serial() != 0) {
    _internal_set_serial(from._internal_serial());
  }
  if (from.is_end() != 0) {
    _internal_set_is_end(from._internal_is_end());
  }
}

void LogReadResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rj_logread.LogReadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogReadResponse::CopyFrom(const LogReadResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rj_logread.LogReadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogReadResponse::IsInitialized() const {
  return true;
}

void LogReadResponse::InternalSwap(LogReadResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(serial_, other->serial_);
  swap(is_end_, other->is_end_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogReadResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace rj_logread
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rj_logread::LogReadRequest* Arena::CreateMaybeMessage< ::rj_logread::LogReadRequest >(Arena* arena) {
  return Arena::CreateInternal< ::rj_logread::LogReadRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::rj_logread::LogReadResponse* Arena::CreateMaybeMessage< ::rj_logread::LogReadResponse >(Arena* arena) {
  return Arena::CreateInternal< ::rj_logread::LogReadResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
